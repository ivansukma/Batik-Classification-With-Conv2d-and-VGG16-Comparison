# -*- coding: utf-8 -*-
"""TAS_Machine_Learning 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WztcZ6up_KLF6pL-E9P9HD5HlU0NCo2S
"""

from google.colab import drive
drive.mount('/content/drive')

cd drive/MyDrive/Colab Notebooks/batik_indonesia

import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from keras.preprocessing.image import img_to_array
from keras.utils import to_categorical

from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
import random
import cv2
import os
from PIL import Image

from keras.layers import *
from keras.models import *
import keras
import tensorflow as tf

train_dir = r'./data/train'
validation_dir = r'./data/validation'
test_dir = r'./data/testing'

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range = 0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)
val_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150,150),
    batch_size=20,
    class_mode='categorical')

val_generator = val_datagen.flow_from_directory(
    validation_dir,
    target_size=(150,150),
    batch_size=20,
    class_mode='categorical')

def plots(ims, figsize = (16,16), rows=4,interp=False,titles=None):
  f = plt.figure(figsize=figsize)
  cols = len(ims)//rows if len(ims) % 2 == 0 else len(ims)//rows + 1
  for i in range(len(ims)) :
    sp = f.add_subplot(rows,cols,i+1)
    sp.axis('off')
    sp.set_title(class_names[titles[i].tolist().index(1)], fontsize = 16)
    plt.imshow(ims[i])

class_names = ['batik pekalongan','batik semarang','batik solo','batik sragen','batik yogyakarta']

imgs,labels = next(train_generator)
plots(imgs, titles=labels)

from keras import models, layers
model = models.Sequential()
model.add(layers.Conv2D(filters=32, kernel_size=(5,5),activation='relu', input_shape=(150,150,3)))
model.add(layers.MaxPool2D(pool_size=(2,2)))
model.add(layers.Conv2D(filters=64, kernel_size=(3,3), activation='relu'))
model.add(layers.MaxPool2D(pool_size=(2,2)))
model.add(layers.Dropout(rate=0.5))
model.add(layers.Flatten())
model.add(layers.Dense(256,activation='relu'))
model.add(layers.Dropout(rate=0.5))
model.add(layers.Dense(5,activation='softmax'))

import keras
import pydotplus
from keras.utils.vis_utils import model_to_dot

keras.utils.plot_model(model)

model.summary()

from tensorflow.keras import optimizers
model.compile(
    loss='categorical_crossentropy',
    optimizer='adam',
    metrics=['accuracy']
)

history = model.fit_generator(
    train_generator,
    steps_per_epoch=25,
    epochs=20,
    validation_data=val_generator,
    validation_steps=2)

test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(150,150),
    batch_size=5,
    class_mode='categorical')

model.save("model.h5")

model = tf.keras.models.load_model('model.h5')
model.summary()

model.evaluate_generator(test_generator, steps=4)

imgs, labels = next(test_generator)
fig = plt.figure(figsize=(16,16))
columns = 2
rows = 2
for i in range(columns*rows):
  fig.add_subplot(rows, columns, i+1)
  img_t=np.expand_dims(imgs[i], axis=0)
  prediction=model.predict(img_t)
  idx = prediction[0].tolist().index(max(prediction[0]))
  plt.text(20, 58, class_names[idx],color='red', fontsize=10, bbox=dict(facecolor='white',alpha=0.8))
  plt.imshow(imgs[i])

from tensorflow.keras.applications import VGG16
conv_base = VGG16(weights = 'imagenet',
                  include_top = False,
                  input_shape = (150,150,3))

conv_base.summary()

from tensorflow.keras import models
from tensorflow.keras import layers

model = models.Sequential()
model.add(conv_base)
model.add(layers.Flatten())
model.add(layers.Dense(256,activation='relu'))
model.add(layers.Dropout(rate=0.5))
model.add(layers.Dense(5,activation='softmax'))

import keras
import pydotplus
from keras.utils.vis_utils import model_to_dot

keras.utils.plot_model(model)

model.summary()

from tensorflow.keras import optimizers
model.compile(
    loss='categorical_crossentropy',
    optimizer = optimizers.RMSprop(lr=2e-5),
    metrics=['accuracy']
)

history = model.fit_generator(
    train_generator,
    steps_per_epoch=25,
    epochs=20,
    validation_data=val_generator,
    validation_steps= 2)

model.save("model_save.h5")

model = tf.keras.models.load_model('model_save.h5')
model.summary()

test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(150,150),
    batch_size=5,
    class_mode='categorical')

model.evaluate_generator(test_generator,steps=4)

imgs, labels = next(test_generator)
fig = plt.figure(figsize=(16,16))
columns = 2
rows = 2
for i in range(columns*rows):
  fig.add_subplot(rows, columns, i+1)
  img_t=np.expand_dims(imgs[i], axis=0)
  prediction=model.predict(img_t)
  idx = prediction[0].tolist().index(max(prediction[0]))
  plt.text(20, 58, class_names[idx],color='red', fontsize=10, bbox=dict(facecolor='white',alpha=0.8))
  plt.imshow(imgs[i])